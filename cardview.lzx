
<!-- View an annotation card -->

<library>
  <include href="base/image.lzx"/>
  <include href="scroll.lzx"/>

  <!-- An Annotation View -->
  <class name="cardview" extends="vbox"
oninit="Debug.debug('init cardview')">

    <attribute name="card"/>
    <attribute name="cardname"/>
    <attribute name="rsrc"/>
    <attribute name="note"/>
    <attribute name="summary"/>
    <attribute name="icon"/>
    <attribute name="list"/>

    <method name="storeCard" args="">
     <![CDATA[
Debug.debug("storeCard Card before: %w", card)
//Debug.debug("storeCard: %w\nCN:%s R:%s N:%s S:%s I:%s L:%s", this, trans_cardname, trans_rsrc, trans_note, trans_summary, trans_icon, trans_list)
//Debug.debug("Locations CN:%w\nR:%w\nN:%w\nS:%w\nI:%w\nL:%w", cardname, rsrc, note, summary, icon, list)
//Debug.debug("Data CN:%s\nR:%s\nN:%s\nS:%s\nI:%s\nL:%w", cardname.text, rsrc.text, note.text, summary.text, icon.icon, list.list)
//Debug.debug("Card: %s, %w", card.getAttr('name'), card)

      //name
      if (src_cardname != cardname.text) {
//Debug.debug("Rename not supported yet (ignoring) %s :: %s", src_cardname, cardname.text)
      }
Debug.debug( "Source info: Rsrc: %s, %w\nNote: %s, %w\nSumm: %s, %w",
   src_rsrc[0].getAttr('href'), src_rsrc[0], src_note[0].data,
   src_note[0], src_summary[0].data, src_summary[0] )

      //rsrc
      src_rsrc[0].setAttr('href', rsrc.text)
      if (src_note.length > 1) {
//Debug.debug("Extra children rsrc %d", src_note.length)
      }
      //note
      src_note[0].setAttribute('data', note.text)
      if (src_note.length > 1) {
//Debug.debug("Clear children note %d", src_note.length)
        for (var iidx = 1; iidx < src_note.length; iidx++) {
          src_note[iidx].setAttribute('data', '')
        }
      }
      //summary
      src_summary[0].setAttribute('data', summary.text)
      if (src_summary.length > 1) {
//Debug.debug("Clear children summary %d", src_summary.length)
        for (var iidx = 1; iidx < src_summary.length; iidx++) {
          src_summary[iidx].setAttribute('data', '')
        }
      }
      //icon (no icon edit/upload widget yet)
      //src_icon = icon.icon
      //list (no list edit yet either)
      //src_list = icon.list
Debug.debug( "Source after: Rsrc: %s, %w\nNote: %s, %w\nSumm: %s, %w",
   src_rsrc[0].getAttr('href'), src_rsrc[0], src_note[0].data,
   src_note[0], src_summary[0].data, src_summary[0] )
Debug.debug("storeCard Card after : %w", card)
      // XML PUT card to httpwagn/BASE/card.getAttr('name')
     ]]>
    </method>

    <method name="setField" args="field, thiscardname, node">
//Debug.debug("Card: %s, F:%s T:%w N:%w", card.getAttr('name'), field, thiscardname, node)
       this.setAttribute("src_"+field, value)
       var value = (field == 'cardname') ? node : node.childNodes
       this.setAttribute("trans_"+field, thiscardname) // card.getAttr('name')
       switch(field) {
       case "cardname":
         hboxCard.itxtName.setAttribute('text',value)
         this.setAttribute(field, hboxCard.itxtName)
         break
       case "rsrc":
         hboxRsrc.itxtRsrc.setAttribute('text', value[0].getAttr('href'))
         this.setAttribute(field, hboxRsrc.itxtRsrc)
         break
       case "note":
         hboxCard.itxtNode.setAttribute('text',value)
         this.setAttribute(field, hboxCard.itxtNode)
         break
       case "summary":
         hboxIconSumm.summSumm.itxtSumm.setAttribute('text',value)
         this.setAttribute(field, hboxIconSumm.summSumm.itxtSumm)
         break
       case "icon":
         hboxIconSumm.iconIcon.setAttribute('icon',value)
         this.setAttribute(field, hboxIconSumm.iconIcon)
         break
       case "list":
         linkList.setAttribute('list',value)
         this.setAttribute(field, linkList)
         break
       }
    </method>

    <hbox name="hboxCard" spacing="5">
      <button text="Save" onclick="parent.parent.storeCard()"/>
      <text text="Card: "/>
      <inputtext name="itxtName"/>
      <text text="--"/>
      <inputtext name="itxtNode"/>
    </hbox>
    <hbox name="hboxIconSumm" clip="true" spacing="5">
      <icon name="iconIcon"/>
      <summary name="summSumm" height="${parent.iconIcon.height}"
               width="${canvas.width-parent.iconIcon.width-20}">
      </summary>
    </hbox>
    <hbox name="hboxRsrc" spacing="5">
      <text text="Resource:" visible="${parent.itxtRsrc.visible}"/>
      <inputtext name="itxtRsrc" visible="${this.text}"/>
    </hbox>
    <linklist name="linkList" visible="false"/>
  </class>

<!-- Views for components of a card annotation -->

  <!-- <icon> .. an image -->
  <class name="icon">
    <attribute name="icon"/>
    <handler name="onicon"><![CDATA[
       var hpre = httpwagn.src
       var x = hpre.indexOf("http://")
       if (x >=0) {
         var st = hpre.indexOf('/', x+7)
         if (st >= 0) { hpre = hpre.substr(0,st) }
       }
       new lz.image(this, {'src': hpre+icon[0].getAttr('src')})
    ]]></handler>
  </class>

  <!-- <summary> .. the long description is scrollable veritcally. The widthfield parameter
                    tells scrollview to set the width of that field to the space available,
                    effectivly disabling horizontal scrolling by making the multi-line
                    inputtext field tha same as the space -->
  <class name="summary" headtext="" foottext="" defaultplacement="itxtSumm"
         widthfield="${itxtSumm}" extends="scrollview">

    <inputtext name="itxtSumm" valign="top" multiline="true" onheight="parent.onheight"/>
  </class>

  <!-- a list of buttons to load cards linked to this one (or all of them) -->
  <class name="linklist" extends="hbox" >
    <attribute name="list" value="null"/>
    <handler name="onlist">
      this.loadlist.setAttribute('text', parent.trans_list )
      this.setAttribute('visible', 'true')
      this.repLink.setAttribute('nodes',list)
    </handler>

    <!-- cardlinks for the +list field, first button is
         the pointer card for the whole list (loads all of them) -->
    <linkbutton name="loadlist"/>
    <replicator name="repLink">
      <linkbutton/>
    </replicator>
  </class>

  <!-- a button linking to a card, pointer card is a special case,
       no 'p' attribute from replicator-->
  <class name="linkbutton" text="$path{'cardref[text]'}" extends="button">
    <attribute name="target"/>
    <handler name="onclick"> canvas.httpwagn.getCard(target) </handler>
    <handler name="ontext">
      var p=this.datapath.p
      if (p != null) {
        this.setAttribute('target', p.getAttr('card') )
      } else {
        this.setAttribute('target', this.text )
        this.setAttribute('visible', 'true' )
      }
    </handler>
  </class>
</library>
