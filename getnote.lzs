
/*
 * find_notes(nodes, parent, [element])]
 */
function find_notes(nodes, parent, element='card', cardname='', newnode=null) {
  for (var idx=0; idx<nodes.length; idx++) {
    var subNode = nodes[idx]
    var t = subNode.nodeType
    var nodeName = subNode.nodeName
    var name = ''
    var type
    //Debug.debug("Iter[%s,%s] t[%s] %w", idx, nodeName, t, subNode)
    if (t == lz.DataElement.ELEMENT_NODE) {
      var elemName = subNode.getAttr('name')
      var children = subNode.childNodes

      // base card
      if (subNode.hasAttr('key')) {

        // On loading a Pointer card, load all it's subcards
        if (subNode.hasAttr("type") && (type = subNode.getAttr('type')) == 'Pointer') {
          fetch_cards(children)
        } else {
          // otherwise create the view and assign cardname field
          cardname = elemName
          if (newnode) { Debug.error("Second cardname found: %w", newnode) }
          newnode = new lz.cardview(parent)
          newnode.setAttribute('card', subNode)
          newnode.setAttribute('url', canvas.httpwagn.src)
          newnode.setAttribute('cardname', cardname)
          //Debug.debug("New card Name[%s] %w", cardname, newnode)
        }
      } else if (nodeName == element) {
        // Top level card, create the node and put in the name
        if (subNode.getAttr('transclude').substr(0,1) == '+') {
          cardname += '+' + elemName
        }
        switch(elemName) {
        case "icon" : name='icon'; break
        case "description" : name='summary'; break
        case "statement" : name='note'; break
        case "resource" : name='rsrc'; break
        case "list" : name='list'; break
        }
        //Debug.debug("Found search element:%s[%s,%s] %w", t, elemName, name, subNode)
        if (name) {
          if (children) {
            var nocont=false
            for (var x=0; x<children.length; x++) {
              var child = children[x]
              if (child.nodeType == lz.DataElement.ELEMENT_NODE &&
                  child.nodeName == 'no_card')
                { nocont=true; break }
            }
            if (!nocont && !newnode.name) {
//Debug.debug("Set Field[%s] CN:%s NN:%w", name, cardname, newnode)
              newnode.setField(name, cardname, subNode)
            }
          }
          continue
        }
      }
      if (children) { find_notes(children, parent, element, cardname, newnode) }
    }
  }
}

/*
 * fetch_cards(nodes)
 *
 *   calls getCard for each cardref node in nodes, fetching all those cards
 */
function fetch_cards(nodes) {
  //Debug.debug("Pointer fetches: %w", nodes)
  for (var idx=0; idx<nodes.length; idx++) {
    var subNode = nodes[idx]
    var t = subNode.nodeType
    var nodeName = subNode.nodeName
    var name = ''
    //Debug.debug("Iter[%s,%s] t[%s] %w", idx, nodeName, t, subNode)
    if (t == lz.DataElement.ELEMENT_NODE) {
      if (nodeName == 'cardref') {
        var cardname = subNode.getAttr('card')
        var cclass = subNode.getAttr('class')
        if (cclass == 'known-card') {
          //Debug.debug("getCard(%s) %w", cardname, subNode)
          canvas.httpwagn.getCard(cardname)
        } //else { Debug.debug("Unknown?: %s", cclass) }
      } //else { Debug.debug("Not cardref %s", nodeName) }
    } //else { Debug.debug("Text? %s %s", subNode.getText()) }
  }
}
